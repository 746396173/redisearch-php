{
    "docs": [
        {
            "location": "/", 
            "text": "What is this?\n\n\nRediSearch-PHP is a PHP client library for the \nRediSearch\n module which adds Full-Text search to Redis.\n\n\nRequirements\n\n\n\n\nRedis running with the \nRediSearch module loaded\n.\n\n\nPHP \n=7\n\n\nPhpRedis\n OR \nPredis\n.\n\n\n\n\nInstall\n\n\ncomposer install ethanhann/redisearch-php\n\n\n\n\nLoad\n\n\n?php\n\nrequire_once 'vendor/autoload.php';\n\n\n\n\nCreate an Index Class\n\n\n?php\n\nnamespace Your\\Indexes;\n\nuse Eeh\\RediSearch\\AbstractIndex;\n\nclass BookIndex extends AbstractIndex\n{\n}\n\n\n\n\nCreate the Schema\n\n\n?php\n\n$bookIndex = new BookIndex();\n\n$bookIndex-\naddTextField('title')\n    -\naddTextField('author')\n    -\naddNumericField('price')\n    -\naddNumericField('stock')\n    -\ncreate();\n\n\n\n\nAdd a Document\n\n\n?php\n\n$bookIndex-\nadd([\n    new TextField('title', 'Tale of Two Cities'),\n    new TextField('author', 'Charles Dickens'),\n    new NumericField('price', 9.99),\n    new NumericField('stock', 231),\n]);\n\n\n\n\nSearch the Index\n\n\n?php\n\n$result = $bookIndex-\nsearch('two cities');\n\n$result-\ncount();     // Number of documents.\n$result-\ndocuments(); // Array of matches.\n\n// Documents are returned as objects by default.\n$firstResult = $result-\ndocuments()[0];\n$firstResult-\ntitle;\n$firstResult-\nauthor;", 
            "title": "Getting Started"
        }, 
        {
            "location": "/#what-is-this", 
            "text": "RediSearch-PHP is a PHP client library for the  RediSearch  module which adds Full-Text search to Redis.", 
            "title": "What is this?"
        }, 
        {
            "location": "/#requirements", 
            "text": "Redis running with the  RediSearch module loaded .  PHP  =7  PhpRedis  OR  Predis .", 
            "title": "Requirements"
        }, 
        {
            "location": "/#install", 
            "text": "composer install ethanhann/redisearch-php", 
            "title": "Install"
        }, 
        {
            "location": "/#load", 
            "text": "?php\n\nrequire_once 'vendor/autoload.php';", 
            "title": "Load"
        }, 
        {
            "location": "/#create-an-index-class", 
            "text": "?php\n\nnamespace Your\\Indexes;\n\nuse Eeh\\RediSearch\\AbstractIndex;\n\nclass BookIndex extends AbstractIndex\n{\n}", 
            "title": "Create an Index Class"
        }, 
        {
            "location": "/#create-the-schema", 
            "text": "?php\n\n$bookIndex = new BookIndex();\n\n$bookIndex- addTextField('title')\n    - addTextField('author')\n    - addNumericField('price')\n    - addNumericField('stock')\n    - create();", 
            "title": "Create the Schema"
        }, 
        {
            "location": "/#add-a-document", 
            "text": "?php\n\n$bookIndex- add([\n    new TextField('title', 'Tale of Two Cities'),\n    new TextField('author', 'Charles Dickens'),\n    new NumericField('price', 9.99),\n    new NumericField('stock', 231),\n]);", 
            "title": "Add a Document"
        }, 
        {
            "location": "/#search-the-index", 
            "text": "?php\n\n$result = $bookIndex- search('two cities');\n\n$result- count();     // Number of documents.\n$result- documents(); // Array of matches.\n\n// Documents are returned as objects by default.\n$firstResult = $result- documents()[0];\n$firstResult- title;\n$firstResult- author;", 
            "title": "Search the Index"
        }, 
        {
            "location": "/indexing/", 
            "text": "Indexing\n\n\nField Types\n\n\nThere are three types of fields that can be added to a document: \nTextField\n, \nNumericField\n, and \nGeoField\n.\n\n\nThey are instantiated like this...\n\n\n?php\nnew TextField('author', 'Charles Dickens');\nnew NumericField('price', 9.99);\nnew GeoField('place', new GeoLocation(-77.0366, 38.8977));\n\n\n\n\nFields can also be made with the FieldFactory class...\n\n\n?php\nFieldFactory::make('author', 'Charles Dickens');                 // equal to new TextField('author', 'Charles Dickens');\nFieldFactory::make('price', 9.99);                               // equal to new NumericField('price', 9.99);\nFieldFactory::make('place', new GeoLocation(-77.0366, 38.8977)); // equal to new GeoField('place', new GeoLocation(-77.0366, 38.8977));\n\n\n\n\nAdding Documents\n\n\nAdd an array of field objects...\n\n\n?php\n\n$bookIndex-\nadd([\n    new TextField('title', 'Tale of Two Cities'),\n    new TextField('author', 'Charles Dickens'),\n    new NumericField('price', 9.99),\n    new GeoField('place', new GeoLocation(-77.0366, 38.8977)),\n]);\n\n\n\n\nAdd an associative array...\n\n\n?php\n\n$bookIndex-\nadd([\n    'title' =\n 'Tale of Two Cities',\n    'author' =\n 'Charles Dickens',\n    'price' =\n 9.99,\n    'place' =\n new GeoLocation(-77.0366, 38.8977),\n]);\n\n\n\n\nCreate a document with the index's makeDocument method, then set field values...\n\n\n?php\n\n$document = $bookIndex-\nmakeDocument();\n$document-\ntitle-\nsetValue('How to be awesome.');\n$document-\nauthor-\nsetValue('Jack');\n$document-\nprice-\nsetValue(9.99);\n$document-\nplace-\nsetValue(new GeoLocation(-77.0366, 38.8977));\n\n$this-\nadd($document);\n\n\n\n\nDocBlocks can (optionally) be used to type hint field property names... \n\n\n?php\n\n/** @var BookDocument $document */\n$document = $bookIndex-\nmakeDocument();\n\n// \ntitle\n will auto-complete correctly in your IDE provided BookDocument has a \ntitle\n property or @property annotation.\n$document-\ntitle-\nsetValue('How to be awesome.');\n\n$this-\nadd($document);\n\n\n\n\n?php\n\nnamespace Your\\Documents;\n\nuse Eeh\\RediSearch\\Document\\Document;\nuse Eeh\\RediSearch\\Fields\\NumericField;\nuse Eeh\\RediSearch\\Fields\\TextField;\n\n/**\n * @property TextField title\n * @property TextField author\n * @property NumericField price\n * @property GeoField place\n */\nclass BookDocument extends Document\n{\n}\n\n\n\n\nUpdating a Document\n\n\nDocuments are updated with an index's replace method.\n\n\n?php\n// Make a document.\n$document = $bookIndex-\nmakeDocument();\n$document-\ntitle-\nsetValue('How to be awesome.');\n$document-\nauthor-\nsetValue('Jack');\n$document-\nprice-\nsetValue(9.99);\n$document-\nplace-\nsetValue(new GeoLocation(-77.0366, 38.8977));\n$bookIndex-\nadd($document);\n\n// Update a couple fields\n$document-\ntitle-\nsetValue('How to be awesome: Part 2.');\n$document-\nprice-\nsetValue(19.99);\n\n// Update the document.\n$bookIndex-\nreplace($document);\n\n\n\n\nA document can also be updating when its ID is specified...\n\n\n?php\n// Make a document.\n$document = $bookIndex-\nmakeDocument();\n$document-\ntitle-\nsetValue('How to be awesome.');\n$document-\nauthor-\nsetValue('Jack');\n$document-\nprice-\nsetValue(9.99);\n$document-\nplace-\nsetValue(new GeoLocation(-77.0366, 38.8977));\n$bookIndex-\nadd($document);\n\n// Create a new document and assign the old document's ID to it.\n$newDocument = $bookIndex-\nmakeDocument($document-\ngetId());\n\n// Set a couple fields.\n$document-\ntitle-\nsetValue('');\n$document-\nauthor-\nsetValue('Jack');\n$newDocument-\ntitle-\nsetValue('How to be awesome: Part 2.');\n$newDocument-\nprice-\nsetValue(19.99);\n\n// Update the document.\n$bookIndex-\nreplace($newDocument);\n\n\n\n\nIndexing an External Collection\n\n\nTo index an external collection, make sure to set the document's ID to the ID of the record in the external collection.\n\n\n?php\n\n// Get a record set from your DB (or some other datastore)...\n$records = $someDatabase-\nfindAll();\n\nforeach ($records as $record) {\n    // Make a new document with the external record's ID.\n    $newDocument = $bookIndex-\nmakeDocument($record-\nid);\n    $newDocument-\ntitle-\nsetValue($record-\ntitle);\n    $newDocument-\nauthor-\nsetValue($record-\nauthor);\n    $index-\nadd($newDocument);\n}", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#indexing", 
            "text": "", 
            "title": "Indexing"
        }, 
        {
            "location": "/indexing/#field-types", 
            "text": "There are three types of fields that can be added to a document:  TextField ,  NumericField , and  GeoField .  They are instantiated like this...  ?php\nnew TextField('author', 'Charles Dickens');\nnew NumericField('price', 9.99);\nnew GeoField('place', new GeoLocation(-77.0366, 38.8977));  Fields can also be made with the FieldFactory class...  ?php\nFieldFactory::make('author', 'Charles Dickens');                 // equal to new TextField('author', 'Charles Dickens');\nFieldFactory::make('price', 9.99);                               // equal to new NumericField('price', 9.99);\nFieldFactory::make('place', new GeoLocation(-77.0366, 38.8977)); // equal to new GeoField('place', new GeoLocation(-77.0366, 38.8977));", 
            "title": "Field Types"
        }, 
        {
            "location": "/indexing/#adding-documents", 
            "text": "Add an array of field objects...  ?php\n\n$bookIndex- add([\n    new TextField('title', 'Tale of Two Cities'),\n    new TextField('author', 'Charles Dickens'),\n    new NumericField('price', 9.99),\n    new GeoField('place', new GeoLocation(-77.0366, 38.8977)),\n]);  Add an associative array...  ?php\n\n$bookIndex- add([\n    'title' =  'Tale of Two Cities',\n    'author' =  'Charles Dickens',\n    'price' =  9.99,\n    'place' =  new GeoLocation(-77.0366, 38.8977),\n]);  Create a document with the index's makeDocument method, then set field values...  ?php\n\n$document = $bookIndex- makeDocument();\n$document- title- setValue('How to be awesome.');\n$document- author- setValue('Jack');\n$document- price- setValue(9.99);\n$document- place- setValue(new GeoLocation(-77.0366, 38.8977));\n\n$this- add($document);  DocBlocks can (optionally) be used to type hint field property names...   ?php\n\n/** @var BookDocument $document */\n$document = $bookIndex- makeDocument();\n\n//  title  will auto-complete correctly in your IDE provided BookDocument has a  title  property or @property annotation.\n$document- title- setValue('How to be awesome.');\n\n$this- add($document);  ?php\n\nnamespace Your\\Documents;\n\nuse Eeh\\RediSearch\\Document\\Document;\nuse Eeh\\RediSearch\\Fields\\NumericField;\nuse Eeh\\RediSearch\\Fields\\TextField;\n\n/**\n * @property TextField title\n * @property TextField author\n * @property NumericField price\n * @property GeoField place\n */\nclass BookDocument extends Document\n{\n}", 
            "title": "Adding Documents"
        }, 
        {
            "location": "/indexing/#updating-a-document", 
            "text": "Documents are updated with an index's replace method.  ?php\n// Make a document.\n$document = $bookIndex- makeDocument();\n$document- title- setValue('How to be awesome.');\n$document- author- setValue('Jack');\n$document- price- setValue(9.99);\n$document- place- setValue(new GeoLocation(-77.0366, 38.8977));\n$bookIndex- add($document);\n\n// Update a couple fields\n$document- title- setValue('How to be awesome: Part 2.');\n$document- price- setValue(19.99);\n\n// Update the document.\n$bookIndex- replace($document);  A document can also be updating when its ID is specified...  ?php\n// Make a document.\n$document = $bookIndex- makeDocument();\n$document- title- setValue('How to be awesome.');\n$document- author- setValue('Jack');\n$document- price- setValue(9.99);\n$document- place- setValue(new GeoLocation(-77.0366, 38.8977));\n$bookIndex- add($document);\n\n// Create a new document and assign the old document's ID to it.\n$newDocument = $bookIndex- makeDocument($document- getId());\n\n// Set a couple fields.\n$document- title- setValue('');\n$document- author- setValue('Jack');\n$newDocument- title- setValue('How to be awesome: Part 2.');\n$newDocument- price- setValue(19.99);\n\n// Update the document.\n$bookIndex- replace($newDocument);", 
            "title": "Updating a Document"
        }, 
        {
            "location": "/indexing/#indexing-an-external-collection", 
            "text": "To index an external collection, make sure to set the document's ID to the ID of the record in the external collection.  ?php\n\n// Get a record set from your DB (or some other datastore)...\n$records = $someDatabase- findAll();\n\nforeach ($records as $record) {\n    // Make a new document with the external record's ID.\n    $newDocument = $bookIndex- makeDocument($record- id);\n    $newDocument- title- setValue($record- title);\n    $newDocument- author- setValue($record- author);\n    $index- add($newDocument);\n}", 
            "title": "Indexing an External Collection"
        }, 
        {
            "location": "/searching/", 
            "text": "Searching\n\n\nSimple Text Search\n\n\nText fields can be filtered with the index's search method.\n\n\n?php\n\n$result = $bookIndex-\nsearch('two cities');\n\n$result-\ncount();     // Number of documents.\n$result-\ndocuments(); // Array of stdObjects.\n\n\n\n\nDocuments can also be returned as arrays instead of objects by passing true as the second parameter to the search method.\n\n\n?php\n\n$result = $bookIndex-\nsearch('two cities', true);\n\n$result-\ndocuments(); // Array of arrays.\n\n\n\n\nFiltering Numeric Fields\n\n\nNumeric fields can be filtered with the index's filter method.\n\n\n?php\n\n$result = $bookIndex\n    -\nfilter('price', 4.99, 19.99)\n    -\nsearch('two cities');\n\n\n\n\nFiltering Geo Fields\n\n\nNumeric fields can be filtered with the index's filter method.\n\n\n?php\n\n$result = $bookIndex\n    -\nfilter('price', 4.99, 19.99)\n    -\nsearch('two cities');", 
            "title": "Searching"
        }, 
        {
            "location": "/searching/#searching", 
            "text": "", 
            "title": "Searching"
        }, 
        {
            "location": "/searching/#simple-text-search", 
            "text": "Text fields can be filtered with the index's search method.  ?php\n\n$result = $bookIndex- search('two cities');\n\n$result- count();     // Number of documents.\n$result- documents(); // Array of stdObjects.  Documents can also be returned as arrays instead of objects by passing true as the second parameter to the search method.  ?php\n\n$result = $bookIndex- search('two cities', true);\n\n$result- documents(); // Array of arrays.", 
            "title": "Simple Text Search"
        }, 
        {
            "location": "/searching/#filtering-numeric-fields", 
            "text": "Numeric fields can be filtered with the index's filter method.  ?php\n\n$result = $bookIndex\n    - filter('price', 4.99, 19.99)\n    - search('two cities');", 
            "title": "Filtering Numeric Fields"
        }, 
        {
            "location": "/searching/#filtering-geo-fields", 
            "text": "Numeric fields can be filtered with the index's filter method.  ?php\n\n$result = $bookIndex\n    - filter('price', 4.99, 19.99)\n    - search('two cities');", 
            "title": "Filtering Geo Fields"
        }
    ]
}